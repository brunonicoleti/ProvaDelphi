unit TestunLote;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Vcl.Forms, Vcl.StdCtrls, Data.DB, System.SysUtils, unLote,
  Winapi.Windows, Vcl.DBGrids, DataSnap.DBClient, System.Classes, unErrors;

type
  // Test methods for class TLote

  TestTLote = class(TTestCase)
  strict private
    FLote: TLote;
    FgrdLote: TDBGrid;
    FedtTotal: TEdit;
    FedtDivisoes: TEdit;

    procedure TestMissingGridLote;
    procedure TestMissingEditTotal;
    procedure TestMissingEditDivisoes;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCalculaTotal;
    procedure TestCalculaDivisoes;

    procedure TestExceptions;
  end;

implementation

procedure TestTLote.SetUp;
var
  Lote: RLote;
begin
  FgrdLote := TDBGrid.Create(Application);
  FedtTotal := TEdit.Create(Application);
  FedtDivisoes := TEdit.Create(Application);

  Lote.grdLote := FgrdLote;
  Lote.edtTotal := FedtTotal;
  Lote.edtDivisoes := FedtDivisoes;

  FLote := TLote.Create(application, Lote);
end;

procedure TestTLote.TearDown;
begin
  FLote.Free;
  FLote := nil;
end;

procedure TestTLote.TestCalculaTotal;
var
  Total: Currency;
begin

  FLote.CalculaTotal;
  Total := 0;

  FgrdLote.DataSource.DataSet.First;
  while not FgrdLote.DataSource.DataSet.Eof do
  begin
    Total := Total + FgrdLote.DataSource.DataSet.FieldByName('Valor').AsCurrency;
    FgrdLote.DataSource.DataSet.Next;
  end;

  CheckEquals(10, FgrdLote.DataSource.DataSet.RecordCount, 'Quantidade de registros igual 10.');
  CheckEquals(Total, StrToCurrDef(FedtTotal.Text, 0), 'Somatorio dos valores');
end;

procedure TestTLote.TestCalculaDivisoes;
var
  Atual, Anterior, Total: Currency;
begin
  FLote.CalculaDivisoes;

  FgrdLote.DataSource.DataSet.First;
  Anterior := 0;
  Total := 0;
  while not FgrdLote.DataSource.DataSet.Eof do
  begin
    Atual := FgrdLote.DataSource.DataSet.FieldByName('Valor').AsCurrency;
    if Anterior <> 0 then
      Total := Total + (Atual / Anterior);
    Anterior := Atual;
    FgrdLote.DataSource.DataSet.Next;
  end;

  CheckEquals(10, FgrdLote.DataSource.DataSet.RecordCount, 'Quantidade de registros igual 10.');
  CheckEquals(Total, StrToCurrDef(FedtDivisoes.Text, 0), 'Divisoes dos valores');
end;

procedure TestTLote.TestExceptions;
begin
  CheckException(TestMissingGridLote, MissingGridError, 'Excessao de falta de grid lote');
  CheckException(TestMissingEditTotal, MissingEditError, 'Excessao de falta de edit total');
  CheckException(TestMissingEditDivisoes, MissingEditError, 'Excessao de falta de edit divisoes');
end;

procedure TestTLote.TestMissingEditDivisoes;
var
  Lote: RLote;
begin
  Lote.grdLote := FgrdLote;
  Lote.edtTotal := FedtTotal;
  Lote.edtDivisoes := nil;

  TLote.Create(Application, Lote);
end;

procedure TestTLote.TestMissingEditTotal;
var
  Lote: RLote;
begin
  Lote.grdLote := FgrdLote;
  Lote.edtTotal := nil;
  Lote.edtDivisoes := FedtDivisoes;

  TLote.Create(Application, Lote);
end;

procedure TestTLote.TestMissingGridLote;
var
  Lote: RLote;
begin
  Lote.grdLote := nil;
  Lote.edtTotal := FedtTotal;
  Lote.edtDivisoes := FedtDivisoes;

  TLote.Create(Application, Lote);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLote.Suite);
end.

